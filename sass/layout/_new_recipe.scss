@use '../abstracts/colors' as color;
@use '../abstracts/borders' as border;
@use '../abstracts/breakpoints' as breakpoint;
@use "../abstracts/shadows" as shadow;

@mixin component-count($count, $color, $background) {
    &::before {
        content: '#{$count}';
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: small;
        color: $color;
        background: $background;
        $aspect: clamp(1.5rem, 5vw ,2rem);
        width: $aspect;
        height: $aspect;
        border-radius: border.$rounded_radius;
    }
}

.new-recipe {
    width: calc(100% - 1.5rem);
    max-width: 1024px;
    margin: auto;
    margin-bottom: 10rem;
    padding: .75rem 0;

    .input-container {
        max-width: unset;

        input {
            max-width: unset;
        }

        textarea {
            max-width: unset;
        }
    }


    input {
        &[type=file]{
            border: none;
            padding: .25rem;
            width: clamp(calc(100% - 2.5rem), 2.5vw, 100%);
        }
    }

    > section {
        margin-bottom: 1rem;
        border-radius: border.$small_radius;
    }

    
}

.recipe-info {
    display: flex;
    flex-direction: column;
    background: lighten(color.$medium, 45%);
    padding: .5rem;
    padding-bottom: 1rem;

    @include breakpoint.medium {
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-template-rows: 1fr auto;
        gap: .5rem;
        > div {
            &:nth-child(3){
                display: flex;
                gap: 1rem;

                > * {
                 margin: 0;   
                }
            }

            &:last-child {
                margin: 0;
            }
        }
    }
}

.image-upload {
    margin-top: 1rem;
    
    @include breakpoint.medium {
        margin-top: 0;
    }

    .image-temp {
        background: color.$medium;
        aspect-ratio: 9 / 5;

        border-radius: border.$small_radius;
        margin-bottom: .5rem;
    }
}

.recipe-component {
    display: grid;
    grid-template-columns: auto 1fr;
    grid-auto-flow: column;
    gap: .5rem;
    box-shadow: shadow.$down;

    @for $i from 1 through 10 {
        &:nth-of-type(#{$i + 1}) {
            @include component-count(#{$i}, color.$light, color.$primary);
        }
    }

> div > div {
        display: grid;
        padding: .5rem;
        padding-bottom: 1rem;
        background: lighten(color.$medium, 45%);
        border-radius: border.$small_radius;
        margin-bottom: 1rem;

        h3 {
            margin-bottom: .5rem;
        }

        > .input-container {
            max-width: unset;
            input {
                max-width: unset;
            }
        }

        > button {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: .25rem;
            width: fit-content;
            margin: auto;
            margin-top: .5rem;
            padding: 0;

            span {
                box-shadow: none;

                &:nth-child(2) {
                    display: none;
                }
            }

            @include breakpoint.small {
                padding: 0.3rem 1rem;
                span:nth-child(2) {
                    display: block;
                }
            }

        }

        
    }
}

.ingredient-input {
    display: grid;
    grid-template-columns: 2fr 1fr auto;
    grid-auto-flow: column;
    gap: .5rem;
    align-items: center;
    justify-content: space-between;
    margin: .5rem 0;

    .input-container {
        margin: 0;
    }
    
    button {
        margin-left: auto;
    }
}

.instruction-input {
    display: grid;
    grid-template-columns: auto 1fr;
    grid-auto-flow: column;
    column-gap: .5rem;
    
    .input-container {
        grid-column: 2;
    }

    .image-upload {
        grid-column: 2;
    }

    @include breakpoint.medium {
        grid-template-columns: auto 1fr 1fr;

        .image-upload {
            grid-column: 3;
            margin-top: 0;
        }

        .input-container textarea {
            height: 100%;
        }
    }

    @for $i from 1 through 10 {
        &:nth-of-type(#{$i}) {
            @include component-count(#{$i}, color.$light, color.$primary);
        }
    }

}

.form-buttons {
    display: flex;
    justify-content: space-between;
    gap: 1rem;

    button span:last-child {
        display: none;

        @include breakpoint.small {
            display: initial;
        }
    }

}